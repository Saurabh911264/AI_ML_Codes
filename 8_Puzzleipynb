{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOvkpNMb3x/m8N6RzEm+Hto"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9elqqPu4yoUm","executionInfo":{"status":"ok","timestamp":1696861045307,"user_tz":-330,"elapsed":21,"user":{"displayName":"Saurabh Deshmukh Surya","userId":"10125388274772119689"}},"outputId":"16d73a7d-81f3-4020-c1e7-2490300634ec"},"outputs":[{"output_type":"stream","name":"stdout","text":["Solution:\n","1 2 3\n","4 5 6\n","7 8 0\n"]}],"source":["import copy\n","\n","class Puzzle:\n","    def __init__(self, board):\n","        self.board = board\n","\n","    def __str__(self):\n","        return \"\\n\".join([\" \".join(map(str, row)) for row in self.board])\n","\n","    def find_empty(self):\n","        for i in range(3):\n","            for j in range(3):\n","                if self.board[i][j] == 0:\n","                    return i, j\n","\n","    def move(self, direction):\n","        i, j = self.find_empty()\n","        new_board = copy.deepcopy(self.board)\n","\n","        if direction == \"left\" and j > 0:\n","            new_board[i][j], new_board[i][j - 1] = new_board[i][j - 1], new_board[i][j]\n","        elif direction == \"right\" and j < 2:\n","            new_board[i][j], new_board[i][j + 1] = new_board[i][j + 1], new_board[i][j]\n","        elif direction == \"up\" and i > 0:\n","            new_board[i][j], new_board[i - 1][j] = new_board[i - 1][j], new_board[i][j]\n","        elif direction == \"down\" and i < 2:\n","            new_board[i][j], new_board[i + 1][j] = new_board[i + 1][j], new_board[i][j]\n","\n","        return Puzzle(new_board)\n","\n","    def is_solved(self):\n","        return self.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n","\n","def solve_puzzle(initial_state):\n","    open_set = [initial_state]\n","    closed_set = set()\n","\n","    while open_set:\n","        current_state = open_set.pop(0)\n","\n","        if current_state.is_solved():\n","            return current_state\n","\n","        closed_set.add(str(current_state))\n","\n","        directions = [\"left\", \"right\", \"up\", \"down\"]\n","        for direction in directions:\n","            new_state = current_state.move(direction)\n","            if str(new_state) not in closed_set:\n","                open_set.append(new_state)\n","\n","    return None\n","\n","# Example usage:\n","initial_board = [[1, 2, 3], [4, 5, 6], [7, 0, 8]]  # Initial puzzle state\n","initial_puzzle = Puzzle(initial_board)\n","\n","solution = solve_puzzle(initial_puzzle)\n","\n","if solution:\n","    print(\"Solution:\")\n","    print(solution)\n","else:\n","    print(\"No solution found.\")\n"]}]}